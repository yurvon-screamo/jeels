use openai::{
    Credentials,
    chat::{ChatCompletion, ChatCompletionMessage, ChatCompletionMessageRole},
};

use crate::AppConfig;
use anyhow::Result;

pub async fn generate_video_content(topic: &str, config: &AppConfig) -> Result<String> {
    let credentials = Credentials::new(
        config.openai_api_key.clone(),
        config.openai_api_base.clone(),
    );
    let messages = vec![ChatCompletionMessage {
        role: ChatCompletionMessageRole::User,
        content: Some(format!(
            r#"Ты — учитель японского языка. Создай сценарий для короткого обучающего видео (30–60 секунд) на русском языке, посвящённого изучению новых для зрителя слов: {}.

Требования:
- Аудитория: русскоязычный студент уровня JLPT N5, уже знакомый с базовой грамматикой N5 (например, частицами に, へ, から, простыми существительными, временем ます-формы и т.п.).
- Язык сценария: только русский.
- Не включай приветствия, пожелания удачи, призывы к действию («попробуйте сами», «повторите вслед» и т.д.).
- Не указывай транскрипцию или произношение — текст будет озвучен профессиональным диктором.
- Используй простые, но естественные, повседневные примеры с лексикой и грамматикой уровня N5.
- Общий объём: достаточно для озвучки за 50–100 секунд (примерно 300–500 слов).
- Отдавай только текст для озвучки, без подписей.

Используй шаблон «слова → определение → пример → повтор» для начала видео:

```example
Изучим группу глаголов описывающих движение - 来ます, 行きます и 帰ります. Изучим каждый глагол отдельно.
来ます означает «приходить» к говорящему или к месту, где он находится. Так например можно сказать «Друг приходит ко мне в гости» — 友達がうちに来ます。  
行きます означает «идти» или «ехать» от говорящего в другое место. С его помощью можно сказать «Я иду в школу» — わたしは学校に行きます。  
帰ります означает «возвращаться домой». И пример использования - «После работы я возвращаюсь домой» — 仕事のあと、うちに帰ります。  
Обратите внимание: 帰ります почти всегда относится к возвращению домой, а не просто в любое место.
Закрепим: 来ます - «приходить», 行きます - «идти», 帰ります - «возвращаться домой». И еще раз: 来ます - «приходить», 行きます - «идти», 帰ります - «возвращаться домой».
```

А для завершения выбери **один из подходящих нарративных форматов**:  
— мини-диалог в кафе или магазине,  
— рассказ о дегустации блюд,  
— сравнение реакций на разную еду,  
— история с неожиданной путаницей вкусов,  
— или любой другой естественный контекст, где эти слова возникают органично.

Цель — помочь зрителю **почувствовать разницу между словами через ситуацию**, а не просто запомнить определения.  

В конце можно еще раз повторить пройденные слова:

```example
Сегодня разберём три прилагательных, которые описывают вкус: 甘い, 辛い и 塩辛い.  
甘い означает «сладкий». Например: «Этот торт сладкий» — このケーキは甘いです。  
辛い — это «острый» или «пряный». Так говорят о еде с перцем или васаби: «Этот суп острый» — このスープは辛いです。  
塩辛い — «солёный», часто с оттенком «слишком солёный». Например: «Эта рыба слишком солёная» — この魚は塩辛いです。  
Возможно вам поможет в запоминании, что 塩辛い, это 辛い с приставкой 'しお'.
Запомните: 甘い — сладкий, 辛い — острый, 塩辛い — солёный.
И повторим еще разок: 甘い — сладкий, 辛い — острый, 塩辛い — солёный.
Представьте: вы с другом пробуете блюда в японском ресторане. Вы берёте кусочек торта — и говорите: «Вау, он очень сладкий!» — 甘い！  
Потом ваш друг ест карри и морщится: «Ого, как остро!» — 辛い！  
А когда вы пробуете маринованную рыбу, то сразу пьёте воду и говорите: «Это слишком солёно!» — 塩辛い！  
Обратите внимание: 辛い может означать не только «острый», но и «трудный» в других контекстах, но сейчас мы говорим именно о вкусе. А 塩辛い почти всегда относится к солёному вкусу, особенно когда соли слишком много.  
Таким образом: 甘い — сладкий, 辛い — острый, 塩辛い — солёный.
```

Результат: готовый, связный текст сценария, пригодный для озвучки."#,
            topic
        )),
        name: None,
        function_call: None,
        tool_call_id: None,
        tool_calls: None,
    }];

    let chat_completion = ChatCompletion::builder(config.openai_model.as_str(), messages.clone())
        .credentials(credentials.clone())
        .create()
        .await?;

    let returned_message = chat_completion
        .choices
        .first()
        .ok_or(anyhow::anyhow!("No message returned"))?
        .message
        .content
        .clone()
        .ok_or(anyhow::anyhow!("No content returned"))?;

    let returned_message = returned_message
        .split_once("</think>")
        .map(|(_, content)| content)
        .unwrap_or(returned_message.as_str())
        .trim()
        .replace("\\n", "\n")
        .replace("```text", "")
        .replace("```", "")
        .to_string();

    if returned_message.is_empty() {
        return Err(anyhow::anyhow!("No content returned"));
    }

    Ok(returned_message)
}
